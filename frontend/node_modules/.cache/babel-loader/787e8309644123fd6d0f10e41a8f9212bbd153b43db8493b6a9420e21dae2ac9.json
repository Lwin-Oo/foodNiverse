{"ast":null,"code":"var _jsxFileName = \"/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useLayoutEffect, useMemo } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport API from \"../../utils/api\";\nimport GlobalHeader from \"../../components/GlobalHeader/GlobalHeader\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport MemoryPlayback from \"../../components/MemoryPlayBack/MemoryPlayBack\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HomeFeed = () => {\n  _s();\n  const {\n    username\n  } = useParams();\n  const navigate = useNavigate();\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n  const [memories, setMemories] = useState([]);\n  const [replyCountMap, setReplyCountMap] = useState({});\n  const [activeMemory, setActiveMemory] = useState(null);\n  const [visibleReplies, setVisibleReplies] = useState({}); // track open/closed reply state\n  const [replyMap, setReplyMap] = useState({}); // actual replies\n\n  const groupRefs = useRef({});\n  const threadRefs = useRef({});\n  const mapEmailsToNames = async emails => {\n    try {\n      const res = await API.post(\"/user/map\", {\n        emails\n      });\n      return res.data || {};\n    } catch {\n      return {};\n    }\n  };\n  const handleToggleReplies = async sparkId => {\n    setVisibleReplies(prev => ({\n      ...prev,\n      [sparkId]: !prev[sparkId]\n    }));\n    if (!replyMap[sparkId]) {\n      try {\n        const res = await API.get(`/memories/replies/${sparkId}`);\n        setReplyMap(prev => ({\n          ...prev,\n          [sparkId]: res.data.replies || []\n        }));\n      } catch (err) {\n        console.error(\"❌ Failed to fetch replies:\", err);\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchFeedData = async () => {\n      try {\n        const [createdRes, pairedRes, replyCountRes] = await Promise.all([API.get(\"/memories\"), API.get(\"/memories/paired\"), API.get(\"/memories/replyCounts\")]);\n        const all = [...(createdRes.data.memories || []), ...(pairedRes.data.memories || [])];\n        const unique = Array.from(new Map(all.map(m => [m.id, m])).values());\n        const emails = Array.from(new Set(unique.map(m => m.email).filter(Boolean)));\n        const emailToName = await mapEmailsToNames(emails);\n        const formatted = unique.map(m => {\n          var _m$email;\n          const createdAt = new Date(m.createdAt._seconds * 1000);\n          return {\n            ...m,\n            name: emailToName[m.email] || ((_m$email = m.email) === null || _m$email === void 0 ? void 0 : _m$email.split(\"@\")[0]) || \"Someone\",\n            createdAt,\n            dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n              month: \"short\",\n              day: \"numeric\",\n              year: \"numeric\"\n            }),\n            timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n              hour: \"numeric\",\n              minute: \"2-digit\",\n              hour12: true\n            })\n          };\n        });\n        setMemories(formatted);\n        setReplyCountMap(replyCountRes.data.counts || {});\n      } catch (err) {\n        console.error(\"❌ Failed to fetch feed:\", err);\n      }\n    };\n    fetchFeedData();\n  }, [username]);\n  const sparkOwnerMap = useMemo(() => {\n    const map = {};\n    memories.forEach(mem => {\n      if (!mem.respondingTo) {\n        var _mem$email;\n        map[mem.id] = mem.name || ((_mem$email = mem.email) === null || _mem$email === void 0 ? void 0 : _mem$email.split(\"@\")[0]) || \"someone\";\n      }\n    });\n    return map;\n  }, [memories]);\n  const groupedMemories = memories.reduce((acc, mem) => {\n    if (!acc[mem.dateFormatted]) acc[mem.dateFormatted] = [];\n    acc[mem.dateFormatted].push(mem);\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col gap-24 max-w-7xl mx-auto px-4 pt-10\",\n      children: [Object.entries(groupedMemories).map(([date, group], i) => {\n        const sortedGroup = [...group].sort((a, b) => a.createdAt - b.createdAt);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative w-full\",\n          ref: el => groupRefs.current[date] = el,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute top-1/2 left-[7.5rem] h-[2px] bg-blue-300 opacity-70 z-0 rounded-full\",\n            ref: el => threadRefs.current[date] = el\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center relative w-full overflow-x-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"shrink-0 w-[7.5rem] flex justify-end pr-2 z-10\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-blue-100 text-blue-700 text-xs font-medium px-3 py-1 rounded-full shadow-md\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overflow-x-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-start gap-12 pl-2 z-10 min-w-max timeline-sequence\",\n                children: sortedGroup.map((memory, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex flex-col items-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => setActiveMemory({\n                      ...memory,\n                      name: memory.name\n                    }),\n                    className: \"cursor-pointer\",\n                    children: /*#__PURE__*/_jsxDEV(MemoryCard, {\n                      memory: memory,\n                      currentUser: currentUser,\n                      sparkOwnerMap: sparkOwnerMap\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 137,\n                      columnNumber: 3\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 25\n                  }, this), !memory.respondingTo && memory.userId === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid) && replyCountMap[memory.id] > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleToggleReplies(memory.id),\n                    className: \"mt-2 text-[11px] text-indigo-600 font-semibold hover:underline\",\n                    children: visibleReplies[memory.id] ? \"Hide responses\" : `💬${replyCountMap[memory.id]} ${replyCountMap[memory.id] > 1 ? \"s\" : \"\"}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 29\n                  }, this), visibleReplies[memory.id] && replyMap[memory.id] && replyMap[memory.id].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mt-4 flex flex-col gap-3 pl-4 border-l-2 border-gray-300\",\n                    children: replyMap[memory.id].map(reply => {\n                      var _reply$email;\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"bg-white/80 border border-gray-200 rounded-xl p-3 text-xs text-gray-700 italic w-[12rem]\",\n                        children: [reply.image && /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: reply.image,\n                          alt: \"reply\",\n                          className: \"w-full h-28 object-cover rounded-md mb-2\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 171,\n                          columnNumber: 37\n                        }, this), \"\\u201C\", reply.journal, \"\\u201D\", /*#__PURE__*/_jsxDEV(\"p\", {\n                          className: \"text-[10px] text-gray-400 mt-1\",\n                          children: [\"\\u2014 \", reply.name || ((_reply$email = reply.email) === null || _reply$email === void 0 ? void 0 : _reply$email.split(\"@\")[0]) || \"someone\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 178,\n                          columnNumber: 35\n                        }, this)]\n                      }, reply.id, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 166,\n                        columnNumber: 33\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 29\n                  }, this)]\n                }, j, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this);\n      }), activeMemory && /*#__PURE__*/_jsxDEV(MemoryPlayback, {\n        memory: activeMemory,\n        onClose: () => setActiveMemory(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(HomeFeed, \"zzZIFy2sbJeUOO8uB80LSZG1ooo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = HomeFeed;\nexport default HomeFeed;\nvar _c;\n$RefreshReg$(_c, \"HomeFeed\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLayoutEffect","useMemo","useParams","useNavigate","API","GlobalHeader","MemoryCard","MemoryPlayback","jsxDEV","_jsxDEV","Fragment","_Fragment","HomeFeed","_s","username","navigate","currentUser","JSON","parse","localStorage","getItem","memories","setMemories","replyCountMap","setReplyCountMap","activeMemory","setActiveMemory","visibleReplies","setVisibleReplies","replyMap","setReplyMap","groupRefs","threadRefs","mapEmailsToNames","emails","res","post","data","handleToggleReplies","sparkId","prev","get","replies","err","console","error","fetchFeedData","createdRes","pairedRes","replyCountRes","Promise","all","unique","Array","from","Map","map","m","id","values","Set","email","filter","Boolean","emailToName","formatted","_m$email","createdAt","Date","_seconds","name","split","dateFormatted","toLocaleDateString","month","day","year","timeFormatted","toLocaleTimeString","hour","minute","hour12","counts","sparkOwnerMap","forEach","mem","respondingTo","_mem$email","groupedMemories","reduce","acc","push","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Object","entries","date","group","i","sortedGroup","sort","a","b","ref","el","current","memory","j","onClick","userId","uid","length","reply","_reply$email","image","src","alt","journal","onClose","_c","$RefreshReg$"],"sources":["/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useLayoutEffect, useMemo } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport API from \"../../utils/api\";\nimport GlobalHeader from \"../../components/GlobalHeader/GlobalHeader\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport MemoryPlayback from \"../../components/MemoryPlayBack/MemoryPlayBack\";\n\nconst HomeFeed = () => {\n  const { username } = useParams();\n  const navigate = useNavigate();\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n\n  const [memories, setMemories] = useState([]);\n  const [replyCountMap, setReplyCountMap] = useState({});\n  const [activeMemory, setActiveMemory] = useState(null);\n  const [visibleReplies, setVisibleReplies] = useState({}); // track open/closed reply state\n  const [replyMap, setReplyMap] = useState({}); // actual replies\n\n  const groupRefs = useRef({});\n  const threadRefs = useRef({});\n\n  const mapEmailsToNames = async (emails) => {\n    try {\n      const res = await API.post(\"/user/map\", { emails });\n      return res.data || {};\n    } catch {\n      return {};\n    }\n  };\n\n  const handleToggleReplies = async (sparkId) => {\n    setVisibleReplies((prev) => ({\n      ...prev,\n      [sparkId]: !prev[sparkId],\n    }));\n\n    if (!replyMap[sparkId]) {\n      try {\n        const res = await API.get(`/memories/replies/${sparkId}`);\n        setReplyMap((prev) => ({\n          ...prev,\n          [sparkId]: res.data.replies || [],\n        }));\n      } catch (err) {\n        console.error(\"❌ Failed to fetch replies:\", err);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const fetchFeedData = async () => {\n      try {\n        const [createdRes, pairedRes, replyCountRes] = await Promise.all([\n          API.get(\"/memories\"),\n          API.get(\"/memories/paired\"),\n          API.get(\"/memories/replyCounts\"),\n        ]);\n\n        const all = [...(createdRes.data.memories || []), ...(pairedRes.data.memories || [])];\n        const unique = Array.from(new Map(all.map((m) => [m.id, m])).values());\n\n        const emails = Array.from(new Set(unique.map((m) => m.email).filter(Boolean)));\n        const emailToName = await mapEmailsToNames(emails);\n\n        const formatted = unique.map((m) => {\n          const createdAt = new Date(m.createdAt._seconds * 1000);\n          return {\n            ...m,\n            name: emailToName[m.email] || m.email?.split(\"@\")[0] || \"Someone\",\n            createdAt,\n            dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n              month: \"short\",\n              day: \"numeric\",\n              year: \"numeric\",\n            }),\n            timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n              hour: \"numeric\",\n              minute: \"2-digit\",\n              hour12: true,\n            }),\n          };\n        });\n\n        setMemories(formatted);\n        setReplyCountMap(replyCountRes.data.counts || {});\n      } catch (err) {\n        console.error(\"❌ Failed to fetch feed:\", err);\n      }\n    };\n\n    fetchFeedData();\n  }, [username]);\n\n  const sparkOwnerMap = useMemo(() => {\n    const map = {};\n    memories.forEach((mem) => {\n      if (!mem.respondingTo) {\n        map[mem.id] = mem.name || mem.email?.split(\"@\")[0] || \"someone\";\n      }\n    });\n    return map;\n  }, [memories]);\n\n  const groupedMemories = memories.reduce((acc, mem) => {\n    if (!acc[mem.dateFormatted]) acc[mem.dateFormatted] = [];\n    acc[mem.dateFormatted].push(mem);\n    return acc;\n  }, {});\n\n  return (\n    <>\n      <GlobalHeader />\n      <div className=\"flex flex-col gap-24 max-w-7xl mx-auto px-4 pt-10\">\n        {Object.entries(groupedMemories).map(([date, group], i) => {\n          const sortedGroup = [...group].sort((a, b) => a.createdAt - b.createdAt);\n\n          return (\n            <div key={i} className=\"relative w-full\" ref={(el) => (groupRefs.current[date] = el)}>\n              <div\n                className=\"absolute top-1/2 left-[7.5rem] h-[2px] bg-blue-300 opacity-70 z-0 rounded-full\"\n                ref={(el) => (threadRefs.current[date] = el)}\n              />\n              <div className=\"flex items-center relative w-full overflow-x-auto\">\n                <div className=\"shrink-0 w-[7.5rem] flex justify-end pr-2 z-10\">\n                  <div className=\"bg-blue-100 text-blue-700 text-xs font-medium px-3 py-1 rounded-full shadow-md\">\n                    {date}\n                  </div>\n                </div>\n                <div className=\"overflow-x-auto\">\n                  <div className=\"flex items-start gap-12 pl-2 z-10 min-w-max timeline-sequence\">\n                    {sortedGroup.map((memory, j) => (\n                      <div key={j} className=\"flex flex-col items-center\">\n                        <div\n  onClick={() => setActiveMemory({ ...memory, name: memory.name })}\n  className=\"cursor-pointer\"\n>\n  <MemoryCard\n    memory={memory}\n    currentUser={currentUser}\n    sparkOwnerMap={sparkOwnerMap}\n  />\n</div>\n\n                        {/* 💬 Toggle Replies */}\n                        {!memory.respondingTo &&\n                          memory.userId === currentUser?.uid &&\n                          replyCountMap[memory.id] > 0 && (\n                            <button\n                              onClick={() => handleToggleReplies(memory.id)}\n                              className=\"mt-2 text-[11px] text-indigo-600 font-semibold hover:underline\"\n                            >\n                              {visibleReplies[memory.id]\n                                ? \"Hide responses\"\n                                : `💬${replyCountMap[memory.id]} ${\n                                    replyCountMap[memory.id] > 1 ? \"s\" : \"\"\n                                  }`}\n                            </button>\n                          )}\n\n                        {/* 🧵 Render Replies */}\n                        {visibleReplies[memory.id] &&\n                          replyMap[memory.id] &&\n                          replyMap[memory.id].length > 0 && (\n                            <div className=\"mt-4 flex flex-col gap-3 pl-4 border-l-2 border-gray-300\">\n                              {replyMap[memory.id].map((reply) => (\n                                <div\n                                  key={reply.id}\n                                  className=\"bg-white/80 border border-gray-200 rounded-xl p-3 text-xs text-gray-700 italic w-[12rem]\"\n                                >\n                                  {reply.image && (\n                                    <img\n                                      src={reply.image}\n                                      alt=\"reply\"\n                                      className=\"w-full h-28 object-cover rounded-md mb-2\"\n                                    />\n                                  )}\n                                  “{reply.journal}”\n                                  <p className=\"text-[10px] text-gray-400 mt-1\">\n                                    — {reply.name || reply.email?.split(\"@\")[0] || \"someone\"}\n                                  </p>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n        {activeMemory && (\n          <MemoryPlayback memory={activeMemory} onClose={() => setActiveMemory(null)} />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default HomeFeed;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}