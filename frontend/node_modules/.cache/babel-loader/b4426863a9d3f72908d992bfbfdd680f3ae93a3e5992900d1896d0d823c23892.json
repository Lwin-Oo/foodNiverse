{"ast":null,"code":"var _jsxFileName = \"/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport API from \"../../utils/api\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport DateStream from \"../../components/DateStream/DateStream\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeFeed = () => {\n  _s();\n  const [memories, setMemories] = useState([]);\n  useEffect(() => {\n    const fetchMemories = async () => {\n      try {\n        const res = await API.get(\"/memories\");\n        setMemories(res.data.memories);\n      } catch (err) {\n        console.error(\"‚ùå Failed to load memories:\", err);\n      }\n    };\n    fetchMemories();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-2xl mx-auto space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold mb-4\",\n      children: \"\\uD83E\\uDDF5 Your Memory Stream\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), memories.map((memory, idx) => /*#__PURE__*/_jsxDEV(MemoryCard, {\n      memory: memory\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeFeed, \"4Aw2YNNMbJ74L/XXLmVNoiPIvX0=\");\n_c = HomeFeed;\nexport default HomeFeed;\nvar _c;\n$RefreshReg$(_c, \"HomeFeed\");","map":{"version":3,"names":["React","useEffect","useState","API","MemoryCard","DateStream","jsxDEV","_jsxDEV","HomeFeed","_s","memories","setMemories","fetchMemories","res","get","data","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","memory","idx","_c","$RefreshReg$"],"sources":["/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport API from \"../../utils/api\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport DateStream from \"../../components/DateStream/DateStream\";\n\nconst HomeFeed = () => {\n  const [memories, setMemories] = useState([]);\n\n  useEffect(() => {\n    const fetchMemories = async () => {\n      try {\n        const res = await API.get(\"/memories\");\n        setMemories(res.data.memories);\n      } catch (err) {\n        console.error(\"‚ùå Failed to load memories:\", err);\n      }\n    };\n\n    fetchMemories();\n  }, []);\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-4\">\n      <h2 className=\"text-2xl font-semibold mb-4\">üßµ Your Memory Stream</h2>\n      {memories.map((memory, idx) => (\n        <MemoryCard key={idx} memory={memory} />\n      ))}\n    </div>\n  );\n};\n\nexport default HomeFeed;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAOC,UAAU,MAAM,wCAAwC;AAC/D,OAAOC,UAAU,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,GAAG,CAAC,WAAW,CAAC;QACtCH,WAAW,CAACE,GAAG,CAACE,IAAI,CAACL,QAAQ,CAAC;MAChC,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,GAAG,CAAC;MAClD;IACF,CAAC;IAEDJ,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKY,SAAS,EAAC,6BAA6B;IAAAC,QAAA,gBAC1Cb,OAAA;MAAIY,SAAS,EAAC,6BAA6B;MAAAC,QAAA,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrEd,QAAQ,CAACe,GAAG,CAAC,CAACC,MAAM,EAAEC,GAAG,kBACxBpB,OAAA,CAACH,UAAU;MAAWsB,MAAM,EAAEA;IAAO,GAApBC,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAmB,CACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACf,EAAA,CAxBID,QAAQ;AAAAoB,EAAA,GAARpB,QAAQ;AA0Bd,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}