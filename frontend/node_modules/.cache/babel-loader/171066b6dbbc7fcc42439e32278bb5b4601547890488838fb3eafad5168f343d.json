{"ast":null,"code":"var _jsxFileName = \"/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useLayoutEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport API from \"../../utils/api\";\nimport GlobalHeader from \"../../components/GlobalHeader/GlobalHeader\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport MemoryPlayback from \"../../components/MemoryPlayBack/MemoryPlayBack\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HomeFeed = () => {\n  _s();\n  const {\n    username\n  } = useParams();\n  const navigate = useNavigate();\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n  const currentUserId = currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid;\n  const [memories, setMemories] = useState([]);\n  const [activeMemory, setActiveMemory] = useState(null);\n  const groupRefs = useRef({});\n  const threadRefs = useRef({});\n  const mapEmailsToNames = async emails => {\n    try {\n      const res = await API.post(\"/user/map\", {\n        emails\n      });\n      const emailToName = res.data;\n      return emailToName || {};\n    } catch (err) {\n      console.error(\"❌ Failed to map emails to names:\", err);\n      return {};\n    }\n  };\n\n  // ✅ Redirect if wrong username\n  useEffect(() => {\n    if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) !== username) {\n      navigate(`/${currentUser.name}/feed`, {\n        replace: true\n      });\n    }\n  }, [username, currentUser, navigate]);\n\n  // ✅ Fetch memories\n  useEffect(() => {\n    const fetchMemories = async () => {\n      try {\n        const [createdRes, featuredRes] = await Promise.all([API.get(\"/memories\"), API.get(\"/memories/paired\")]);\n        const all = [...(createdRes.data.memories || []), ...(featuredRes.data.memories || [])];\n        const unique = Array.from(new Map(all.map(m => [m.id, m])).values());\n        const emails = Array.from(new Set(unique.map(m => m.email).filter(Boolean)));\n        const emailToName = await mapEmailsToNames(emails);\n        const formatted = unique.map(m => {\n          var _m$email;\n          const createdAt = new Date(m.createdAt._seconds * 1000);\n          return {\n            ...m,\n            name: emailToName[m.email] || ((_m$email = m.email) === null || _m$email === void 0 ? void 0 : _m$email.split(\"@\")[0]) || \"Someone\",\n            createdAt,\n            dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n              month: \"short\",\n              day: \"numeric\",\n              year: \"numeric\"\n            }),\n            timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n              hour: \"numeric\",\n              minute: \"2-digit\",\n              hour12: true\n            })\n          };\n        });\n        setMemories(formatted);\n      } catch (err) {\n        console.error(\"❌ Failed to fetch memories\", err);\n      }\n    };\n    fetchMemories();\n  }, []);\n  useLayoutEffect(() => {\n    Object.entries(groupRefs.current).forEach(([date, groupEl]) => {\n      const container = groupEl.querySelector(\".timeline-sequence\");\n      const thread = threadRefs.current[date];\n      if (container && thread) {\n        const dateStart = groupEl.getBoundingClientRect().left + 120;\n        const end = container.getBoundingClientRect().right;\n        const width = end - dateStart;\n        thread.style.width = `${width}px`;\n      }\n    });\n  }, [memories]);\n  const groupedMemories = memories.reduce((acc, mem) => {\n    if (!acc[mem.dateFormatted]) acc[mem.dateFormatted] = [];\n    acc[mem.dateFormatted].push(mem);\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col gap-24 max-w-7xl mx-auto px-4 pt-10\",\n      children: [Object.entries(groupedMemories).map(([date, group], i) => {\n        const sortedGroup = [...group].sort((a, b) => a.createdAt - b.createdAt);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative w-full\",\n          ref: el => groupRefs.current[date] = el,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute top-1/2 left-[7.5rem] h-[2px] bg-blue-300 opacity-70 z-0 rounded-full\",\n            ref: el => threadRefs.current[date] = el\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center relative w-full overflow-x-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"shrink-0 w-[7.5rem] flex justify-end pr-2 z-10\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-blue-100 text-blue-700 text-xs font-medium px-3 py-1 rounded-full shadow-md\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overflow-x-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center gap-12 pl-2 z-10 min-w-max timeline-sequence\",\n                children: sortedGroup.map((memory, j) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"relative flex flex-col items-center w-fit\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-2 text-center\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"text-[11px] text-gray-500 font-medium whitespace-nowrap\",\n                        children: memory.timeFormatted\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 127,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 126,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => setActiveMemory(...memory),\n                    className: \"cursor-pointer\",\n                    children: /*#__PURE__*/_jsxDEV(MemoryCard, {\n                      memory: memory,\n                      currentUser: currentUser\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 133,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 23\n                  }, this)]\n                }, j, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this);\n      }), activeMemory && /*#__PURE__*/_jsxDEV(MemoryPlayback, {\n        memory: activeMemory,\n        onClose: () => setActiveMemory(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(HomeFeed, \"vQL6mLVHhRzMJlPjKBsBLEDTyaA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = HomeFeed;\nexport default HomeFeed;\nvar _c;\n$RefreshReg$(_c, \"HomeFeed\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLayoutEffect","useParams","useNavigate","API","GlobalHeader","MemoryCard","MemoryPlayback","jsxDEV","_jsxDEV","Fragment","_Fragment","HomeFeed","_s","username","navigate","currentUser","JSON","parse","localStorage","getItem","currentUserId","uid","memories","setMemories","activeMemory","setActiveMemory","groupRefs","threadRefs","mapEmailsToNames","emails","res","post","emailToName","data","err","console","error","name","replace","fetchMemories","createdRes","featuredRes","Promise","all","get","unique","Array","from","Map","map","m","id","values","Set","email","filter","Boolean","formatted","_m$email","createdAt","Date","_seconds","split","dateFormatted","toLocaleDateString","month","day","year","timeFormatted","toLocaleTimeString","hour","minute","hour12","Object","entries","current","forEach","date","groupEl","container","querySelector","thread","dateStart","getBoundingClientRect","left","end","right","width","style","groupedMemories","reduce","acc","mem","push","children","fileName","_jsxFileName","lineNumber","columnNumber","className","group","i","sortedGroup","sort","a","b","ref","el","memory","j","onClick","onClose","_c","$RefreshReg$"],"sources":["/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useLayoutEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport API from \"../../utils/api\";\nimport GlobalHeader from \"../../components/GlobalHeader/GlobalHeader\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport MemoryPlayback from \"../../components/MemoryPlayBack/MemoryPlayBack\";\n\nconst HomeFeed = () => {\n  const { username } = useParams();\n  const navigate = useNavigate();\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n  const currentUserId = currentUser?.uid;\n\n  const [memories, setMemories] = useState([]);\n  const [activeMemory, setActiveMemory] = useState(null);\n  const groupRefs = useRef({});\n  const threadRefs = useRef({});\n\n  const mapEmailsToNames = async (emails) => {\n    try {\n      const res = await API.post(\"/user/map\", { emails });\n  \n      const emailToName = res.data; \n      return emailToName || {};\n    } catch (err) {\n      console.error(\"❌ Failed to map emails to names:\", err);\n      return {};\n    }\n  };\n  \n  // ✅ Redirect if wrong username\n  useEffect(() => {\n    if (currentUser?.name !== username) {\n      navigate(`/${currentUser.name}/feed`, { replace: true });\n    }\n  }, [username, currentUser, navigate]);\n\n  // ✅ Fetch memories\n  useEffect(() => {\n  const fetchMemories = async () => {\n    try {\n      const [createdRes, featuredRes] = await Promise.all([\n        API.get(\"/memories\"),\n        API.get(\"/memories/paired\"),\n      ]);\n\n      const all = [...(createdRes.data.memories || []), ...(featuredRes.data.memories || [])];\n      const unique = Array.from(new Map(all.map((m) => [m.id, m])).values());\n\n      const emails = Array.from(new Set(unique.map(m => m.email).filter(Boolean)));\n      const emailToName = await mapEmailsToNames(emails);\n\n      const formatted = unique.map((m) => {\n        const createdAt = new Date(m.createdAt._seconds * 1000);\n        return {\n          ...m,\n          name: emailToName[m.email] || m.email?.split(\"@\")[0] || \"Someone\",\n          createdAt,\n          dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n            month: \"short\",\n            day: \"numeric\",\n            year: \"numeric\",\n          }),\n          timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n            hour: \"numeric\",\n            minute: \"2-digit\",\n            hour12: true,\n          }),\n        };\n      });\n\n      setMemories(formatted);\n    } catch (err) {\n      console.error(\"❌ Failed to fetch memories\", err);\n    }\n  };\n\n  fetchMemories();\n}, []);\n\n\n  useLayoutEffect(() => {\n    Object.entries(groupRefs.current).forEach(([date, groupEl]) => {\n      const container = groupEl.querySelector(\".timeline-sequence\");\n      const thread = threadRefs.current[date];\n\n      if (container && thread) {\n        const dateStart = groupEl.getBoundingClientRect().left + 120;\n        const end = container.getBoundingClientRect().right;\n        const width = end - dateStart;\n        thread.style.width = `${width}px`;\n      }\n    });\n  }, [memories]);\n\n  const groupedMemories = memories.reduce((acc, mem) => {\n    if (!acc[mem.dateFormatted]) acc[mem.dateFormatted] = [];\n    acc[mem.dateFormatted].push(mem);\n    return acc;\n  }, {});\n\n  return (\n    <>\n      <GlobalHeader/>\n      <div className=\"flex flex-col gap-24 max-w-7xl mx-auto px-4 pt-10\">\n      {Object.entries(groupedMemories).map(([date, group], i) => {\n        const sortedGroup = [...group].sort((a, b) => a.createdAt - b.createdAt);\n\n        return (\n          <div key={i} className=\"relative w-full\" ref={(el) => (groupRefs.current[date] = el)}>\n            <div\n              className=\"absolute top-1/2 left-[7.5rem] h-[2px] bg-blue-300 opacity-70 z-0 rounded-full\"\n              ref={(el) => (threadRefs.current[date] = el)}\n            />\n            <div className=\"flex items-center relative w-full overflow-x-auto\">\n              <div className=\"shrink-0 w-[7.5rem] flex justify-end pr-2 z-10\">\n                <div className=\"bg-blue-100 text-blue-700 text-xs font-medium px-3 py-1 rounded-full shadow-md\">\n                  {date}\n                </div>\n              </div>\n              <div className=\"overflow-x-auto\">\n                <div className=\"flex items-center gap-12 pl-2 z-10 min-w-max timeline-sequence\">\n                  {sortedGroup.map((memory, j) => (\n                    <React.Fragment key={j}>\n                      <div className=\"relative flex flex-col items-center w-fit\">\n                        <div className=\"mb-2 text-center\">\n                          <div className=\"text-[11px] text-gray-500 font-medium whitespace-nowrap\">\n                            {memory.timeFormatted}\n                          </div>\n                        </div>\n                      </div>\n                      <div onClick={() => setActiveMemory(...memory)} className=\"cursor-pointer\">\n                        <MemoryCard memory={memory} currentUser={currentUser} />\n                      </div>\n                    </React.Fragment>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n      {activeMemory && (\n        <MemoryPlayback\n          memory={activeMemory}\n          onClose={() => setActiveMemory(null)}\n        />\n      )}\n      </div>\n    </>\n    \n  );\n};\n\nexport default HomeFeed;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}