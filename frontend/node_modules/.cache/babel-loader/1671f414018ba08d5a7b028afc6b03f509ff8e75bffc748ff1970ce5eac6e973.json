{"ast":null,"code":"var _jsxFileName = \"/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useLayoutEffect, useMemo } from \"react\";\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\nimport API from \"../../utils/api\";\nimport GlobalHeader from \"../../components/GlobalHeader/GlobalHeader\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport MemoryPlayback from \"../../components/MemoryPlayBack/MemoryPlayBack\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HomeFeed = () => {\n  _s();\n  const {\n    username\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n  const [memories, setMemories] = useState([]);\n  const [activeMemory, setActiveMemory] = useState(null);\n  const groupRefs = useRef({});\n  const threadRefs = useRef({});\n  const mapEmailsToNames = async emails => {\n    try {\n      const res = await API.post(\"/user/map\", {\n        emails\n      });\n      return res.data || {};\n    } catch (err) {\n      console.error(\"❌ Failed to map emails to names:\", err);\n      return {};\n    }\n  };\n  useEffect(() => {\n    const fetchFeedData = async () => {\n      try {\n        const userRes = await API.get(`/user/${username}`);\n        const partner = userRes.data;\n        if (currentUser !== null && currentUser !== void 0 && currentUser.uid && partner !== null && partner !== void 0 && partner.uid && currentUser.uid !== partner.uid) {\n          const threadRes = await API.post(\"ai/threads/check\", {\n            userId: currentUser.uid,\n            email: currentUser.email,\n            partnerEmail: partner.email\n          });\n          if (!threadRes.data.hasThread) {\n            navigate(`/${currentUser.name}/feed`, {\n              replace: true\n            });\n            return;\n          }\n          const [createdRes, featuredRes] = await Promise.all([API.get(`/memories/public?uid=${partner.uid}`), API.get(\"/memories/paired\")]);\n          const all = [...(createdRes.data || []), ...(featuredRes.data.memories || [])];\n          const unique = Array.from(new Map(all.map(m => [m.id, m])).values());\n          const emails = Array.from(new Set(unique.map(m => m.email).filter(Boolean)));\n          const emailToName = await mapEmailsToNames(emails);\n          const formatted = unique.map(m => {\n            var _m$createdAt, _m$email;\n            const createdAt = (_m$createdAt = m.createdAt) !== null && _m$createdAt !== void 0 && _m$createdAt._seconds ? new Date(m.createdAt._seconds * 1000) : new Date();\n            return {\n              ...m,\n              createdAt,\n              dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n                year: \"numeric\"\n              }),\n              timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n                hour: \"numeric\",\n                minute: \"2-digit\",\n                hour12: true\n              }),\n              name: m.name || ((_m$email = m.email) === null || _m$email === void 0 ? void 0 : _m$email.split(\"@\")[0]) || \"Someone\"\n            };\n          });\n          setMemories(formatted);\n        } else {\n          const [createdRes, featuredRes] = await Promise.all([API.get(\"/memories\"), API.get(\"/memories/paired\")]);\n          const all = [...(createdRes.data.memories || []), ...(featuredRes.data.memories || [])];\n          const unique = Array.from(new Map(all.map(m => [m.id, m])).values());\n          const emails = Array.from(new Set(unique.map(m => m.email).filter(Boolean)));\n          const emailToName = await mapEmailsToNames(emails);\n          const formatted = unique.map(m => {\n            var _m$email2;\n            const createdAt = new Date(m.createdAt._seconds * 1000);\n            return {\n              ...m,\n              name: emailToName[m.email] || ((_m$email2 = m.email) === null || _m$email2 === void 0 ? void 0 : _m$email2.split(\"@\")[0]) || \"Someone\",\n              createdAt,\n              dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n                year: \"numeric\"\n              }),\n              timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n                hour: \"numeric\",\n                minute: \"2-digit\",\n                hour12: true\n              })\n            };\n          });\n          setMemories(formatted);\n        }\n      } catch (err) {\n        console.error(\"❌ Failed to fetch feed:\", err);\n        navigate(`/${currentUser.name}/feed`, {\n          replace: true\n        });\n      }\n    };\n    fetchFeedData();\n  }, [username]);\n  useLayoutEffect(() => {\n    Object.entries(groupRefs.current).forEach(([date, groupEl]) => {\n      const container = groupEl.querySelector(\".timeline-sequence\");\n      const thread = threadRefs.current[date];\n      if (container && thread) {\n        const dateStart = groupEl.getBoundingClientRect().left + 120;\n        const end = container.getBoundingClientRect().right;\n        const width = end - dateStart;\n        thread.style.width = `${width}px`;\n      }\n    });\n  }, [memories]);\n  const replyCountMap = useMemo(() => {\n    const map = {};\n    memories.forEach(mem => {\n      if (mem.respondingTo) {\n        map[mem.respondingTo] = (map[mem.respondingTo] || 0) + 1;\n      }\n    });\n    return map;\n  }, [memories]);\n  const sparkOwnerMap = useMemo(() => {\n    const map = {};\n    memories.forEach(mem => {\n      if (!mem.respondingTo) {\n        var _mem$email;\n        map[mem.id] = mem.name || ((_mem$email = mem.email) === null || _mem$email === void 0 ? void 0 : _mem$email.split(\"@\")[0]) || \"someone\";\n      }\n    });\n    return map;\n  }, [memories]);\n  const groupedMemories = memories.reduce((acc, mem) => {\n    if (!acc[mem.dateFormatted]) acc[mem.dateFormatted] = [];\n    acc[mem.dateFormatted].push(mem);\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col gap-24 max-w-7xl mx-auto px-4 pt-10\",\n      children: [Object.entries(groupedMemories).map(([date, group], i) => {\n        const sortedGroup = [...group].sort((a, b) => a.createdAt - b.createdAt);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative w-full\",\n          ref: el => groupRefs.current[date] = el,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute top-1/2 left-[7.5rem] h-[2px] bg-blue-300 opacity-70 z-0 rounded-full\",\n            ref: el => threadRefs.current[date] = el\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center relative w-full overflow-x-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"shrink-0 w-[7.5rem] flex justify-end pr-2 z-10\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-blue-100 text-blue-700 text-xs font-medium px-3 py-1 rounded-full shadow-md\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overflow-x-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center gap-12 pl-2 z-10 min-w-max timeline-sequence\",\n                children: sortedGroup.map((memory, j) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"relative flex flex-col items-center w-fit\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-2 text-center\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"text-[11px] text-gray-500 font-medium whitespace-nowrap\",\n                        children: memory.timeFormatted\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 187,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 186,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => setActiveMemory({\n                      ...memory,\n                      name: memory.name\n                    }),\n                    className: \"cursor-pointer\",\n                    children: /*#__PURE__*/_jsxDEV(MemoryCard, {\n                      memory: memory,\n                      currentUser: currentUser,\n                      replyCountMap: replyCountMap,\n                      sparkOwnerMap: sparkOwnerMap\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 196,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 25\n                  }, this)]\n                }, j, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this);\n      }), activeMemory && /*#__PURE__*/_jsxDEV(MemoryPlayback, {\n        memory: activeMemory,\n        onClose: () => setActiveMemory(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(HomeFeed, \"Mzv/Rcarupem3Q28KJT2DaFk98E=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = HomeFeed;\nexport default HomeFeed;\nvar _c;\n$RefreshReg$(_c, \"HomeFeed\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLayoutEffect","useMemo","useParams","useNavigate","useLocation","API","GlobalHeader","MemoryCard","MemoryPlayback","jsxDEV","_jsxDEV","Fragment","_Fragment","HomeFeed","_s","username","location","navigate","currentUser","JSON","parse","localStorage","getItem","memories","setMemories","activeMemory","setActiveMemory","groupRefs","threadRefs","mapEmailsToNames","emails","res","post","data","err","console","error","fetchFeedData","userRes","get","partner","uid","threadRes","userId","email","partnerEmail","hasThread","name","replace","createdRes","featuredRes","Promise","all","unique","Array","from","Map","map","m","id","values","Set","filter","Boolean","emailToName","formatted","_m$createdAt","_m$email","createdAt","_seconds","Date","dateFormatted","toLocaleDateString","month","day","year","timeFormatted","toLocaleTimeString","hour","minute","hour12","split","_m$email2","Object","entries","current","forEach","date","groupEl","container","querySelector","thread","dateStart","getBoundingClientRect","left","end","right","width","style","replyCountMap","mem","respondingTo","sparkOwnerMap","_mem$email","groupedMemories","reduce","acc","push","children","fileName","_jsxFileName","lineNumber","columnNumber","className","group","i","sortedGroup","sort","a","b","ref","el","memory","j","onClick","onClose","_c","$RefreshReg$"],"sources":["/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useLayoutEffect, useMemo } from \"react\";\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\nimport API from \"../../utils/api\";\nimport GlobalHeader from \"../../components/GlobalHeader/GlobalHeader\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport MemoryPlayback from \"../../components/MemoryPlayBack/MemoryPlayBack\";\n\nconst HomeFeed = () => {\n  const { username } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"));\n\n  const [memories, setMemories] = useState([]);\n  const [activeMemory, setActiveMemory] = useState(null);\n  const groupRefs = useRef({});\n  const threadRefs = useRef({});\n\n  const mapEmailsToNames = async (emails) => {\n    try {\n      const res = await API.post(\"/user/map\", { emails });\n      return res.data || {};\n    } catch (err) {\n      console.error(\"❌ Failed to map emails to names:\", err);\n      return {};\n    }\n  };\n\n  useEffect(() => {\n    const fetchFeedData = async () => {\n      try {\n        const userRes = await API.get(`/user/${username}`);\n        const partner = userRes.data;\n\n        if (currentUser?.uid && partner?.uid && currentUser.uid !== partner.uid) {\n          const threadRes = await API.post(\"ai/threads/check\", {\n            userId: currentUser.uid,\n            email: currentUser.email,\n            partnerEmail: partner.email,\n          });\n\n          if (!threadRes.data.hasThread) {\n            navigate(`/${currentUser.name}/feed`, { replace: true });\n            return;\n          }\n\n          const [createdRes, featuredRes] = await Promise.all([\n            API.get(`/memories/public?uid=${partner.uid}`),\n            API.get(\"/memories/paired\"),\n          ]);\n\n          const all = [...(createdRes.data || []), ...(featuredRes.data.memories || [])];\n          const unique = Array.from(new Map(all.map((m) => [m.id, m])).values());\n\n          const emails = Array.from(new Set(unique.map((m) => m.email).filter(Boolean)));\n          const emailToName = await mapEmailsToNames(emails);\n\n          const formatted = unique.map((m) => {\n            const createdAt = m.createdAt?._seconds\n              ? new Date(m.createdAt._seconds * 1000)\n              : new Date();\n\n            return {\n              ...m,\n              createdAt,\n              dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n                year: \"numeric\",\n              }),\n              timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n                hour: \"numeric\",\n                minute: \"2-digit\",\n                hour12: true,\n              }),\n              name: m.name || m.email?.split(\"@\")[0] || \"Someone\",\n            };\n          });\n\n          setMemories(formatted);\n        } else {\n          const [createdRes, featuredRes] = await Promise.all([\n            API.get(\"/memories\"),\n            API.get(\"/memories/paired\"),\n          ]);\n\n          const all = [...(createdRes.data.memories || []), ...(featuredRes.data.memories || [])];\n          const unique = Array.from(new Map(all.map((m) => [m.id, m])).values());\n\n          const emails = Array.from(new Set(unique.map((m) => m.email).filter(Boolean)));\n          const emailToName = await mapEmailsToNames(emails);\n\n          const formatted = unique.map((m) => {\n            const createdAt = new Date(m.createdAt._seconds * 1000);\n            return {\n              ...m,\n              name: emailToName[m.email] || m.email?.split(\"@\")[0] || \"Someone\",\n              createdAt,\n              dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n                year: \"numeric\",\n              }),\n              timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n                hour: \"numeric\",\n                minute: \"2-digit\",\n                hour12: true,\n              }),\n            };\n          });\n\n          setMemories(formatted);\n        }\n      } catch (err) {\n        console.error(\"❌ Failed to fetch feed:\", err);\n        navigate(`/${currentUser.name}/feed`, { replace: true });\n      }\n    };\n\n    fetchFeedData();\n  }, [username]);\n\n  useLayoutEffect(() => {\n    Object.entries(groupRefs.current).forEach(([date, groupEl]) => {\n      const container = groupEl.querySelector(\".timeline-sequence\");\n      const thread = threadRefs.current[date];\n      if (container && thread) {\n        const dateStart = groupEl.getBoundingClientRect().left + 120;\n        const end = container.getBoundingClientRect().right;\n        const width = end - dateStart;\n        thread.style.width = `${width}px`;\n      }\n    });\n  }, [memories]);\n\n  const replyCountMap = useMemo(() => {\n    const map = {};\n    memories.forEach((mem) => {\n      if (mem.respondingTo) {\n        map[mem.respondingTo] = (map[mem.respondingTo] || 0) + 1;\n      }\n    });\n    return map;\n  }, [memories]);\n\n  const sparkOwnerMap = useMemo(() => {\n    const map = {};\n    memories.forEach((mem) => {\n      if (!mem.respondingTo) {\n        map[mem.id] = mem.name || mem.email?.split(\"@\")[0] || \"someone\";\n      }\n    });\n    return map;\n  }, [memories]);\n\n  const groupedMemories = memories.reduce((acc, mem) => {\n    if (!acc[mem.dateFormatted]) acc[mem.dateFormatted] = [];\n    acc[mem.dateFormatted].push(mem);\n    return acc;\n  }, {});\n\n  return (\n    <>\n      <GlobalHeader />\n      <div className=\"flex flex-col gap-24 max-w-7xl mx-auto px-4 pt-10\">\n        {Object.entries(groupedMemories).map(([date, group], i) => {\n          const sortedGroup = [...group].sort((a, b) => a.createdAt - b.createdAt);\n\n          return (\n            <div key={i} className=\"relative w-full\" ref={(el) => (groupRefs.current[date] = el)}>\n              <div\n                className=\"absolute top-1/2 left-[7.5rem] h-[2px] bg-blue-300 opacity-70 z-0 rounded-full\"\n                ref={(el) => (threadRefs.current[date] = el)}\n              />\n              <div className=\"flex items-center relative w-full overflow-x-auto\">\n                <div className=\"shrink-0 w-[7.5rem] flex justify-end pr-2 z-10\">\n                  <div className=\"bg-blue-100 text-blue-700 text-xs font-medium px-3 py-1 rounded-full shadow-md\">\n                    {date}\n                  </div>\n                </div>\n                <div className=\"overflow-x-auto\">\n                  <div className=\"flex items-center gap-12 pl-2 z-10 min-w-max timeline-sequence\">\n                    {sortedGroup.map((memory, j) => (\n                      <React.Fragment key={j}>\n                        <div className=\"relative flex flex-col items-center w-fit\">\n                          <div className=\"mb-2 text-center\">\n                            <div className=\"text-[11px] text-gray-500 font-medium whitespace-nowrap\">\n                              {memory.timeFormatted}\n                            </div>\n                          </div>\n                        </div>\n                        <div\n                          onClick={() => setActiveMemory({ ...memory, name: memory.name })}\n                          className=\"cursor-pointer\"\n                        >\n                          <MemoryCard\n                            memory={memory}\n                            currentUser={currentUser}\n                            replyCountMap={replyCountMap}\n                            sparkOwnerMap={sparkOwnerMap}\n                          />\n                        </div>\n                      </React.Fragment>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n        {activeMemory && (\n          <MemoryPlayback memory={activeMemory} onClose={() => setActiveMemory(null)} />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default HomeFeed;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}