{"ast":null,"code":"var _jsxFileName = \"/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useLayoutEffect } from \"react\";\nimport API from \"../../utils/api\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeFeed = () => {\n  _s();\n  const [memories, setMemories] = useState([]);\n  const groupRefs = useRef({});\n  const threadRefs = useRef({});\n  useLayoutEffect(() => {\n    Object.entries(groupRefs.current).forEach(([date, groupEl]) => {\n      const container = groupEl.querySelector(\".timeline-sequence\");\n      const thread = threadRefs.current[date];\n      if (container && thread) {\n        const dateStart = groupEl.getBoundingClientRect().left + 120;\n        const end = container.getBoundingClientRect().right;\n        const width = end - dateStart;\n        thread.style.width = `${width}px`;\n      }\n    });\n  }, [memories]);\n  useEffect(() => {\n    const fetchMemories = async () => {\n      try {\n        const res = await API.get(\"/memories\");\n        const formatted = res.data.memories.map(m => {\n          const createdAt = new Date(m.createdAt._seconds * 1000);\n          return {\n            ...m,\n            dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n              month: \"short\",\n              day: \"numeric\",\n              year: \"numeric\"\n            }),\n            timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n              hour: \"numeric\",\n              minute: \"2-digit\",\n              hour12: true\n            })\n          };\n        });\n        setMemories(formatted); // no reverse if backend is newest-first\n      } catch (err) {\n        console.error(\"❌ Failed to load memories:\", err);\n      }\n    };\n    fetchMemories();\n  }, []);\n  const groupedMemories = memories.reduce((acc, mem) => {\n    if (!acc[mem.dateFormatted]) acc[mem.dateFormatted] = [];\n    acc[mem.dateFormatted].push(mem);\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col gap-24 max-w-7xl mx-auto px-4 pt-10\",\n    children: Object.entries(groupedMemories).map(([date, group], i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full\",\n      ref: el => groupRefs.current[date] = el,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-1/2 left-[7.5rem] h-[2px] bg-blue-300 opacity-70 z-0 rounded-full\",\n        ref: el => threadRefs.current[date] = el\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center relative w-full overflow-x-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"shrink-0 w-[7.5rem] flex justify-end pr-2 z-10\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-blue-100 text-blue-700 text-xs font-medium px-3 py-1 rounded-full shadow-md\",\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-12 pl-2 z-10 min-w-max timeline-sequence\",\n            children: group.map((memory, j) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relative flex flex-col items-center w-fit\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-2 text-[11px] text-gray-500 font-medium whitespace-nowrap\",\n                  children: memory.timeFormatted\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MemoryCard, {\n                memory: memory\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this)]\n            }, j, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeFeed, \"FBzcwPKzc/JD+koDH5iXO+Bw8ow=\");\n_c = HomeFeed;\nexport default HomeFeed;\nvar _c;\n$RefreshReg$(_c, \"HomeFeed\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLayoutEffect","API","MemoryCard","jsxDEV","_jsxDEV","HomeFeed","_s","memories","setMemories","groupRefs","threadRefs","Object","entries","current","forEach","date","groupEl","container","querySelector","thread","dateStart","getBoundingClientRect","left","end","right","width","style","fetchMemories","res","get","formatted","data","map","m","createdAt","Date","_seconds","dateFormatted","toLocaleDateString","month","day","year","timeFormatted","toLocaleTimeString","hour","minute","hour12","err","console","error","groupedMemories","reduce","acc","mem","push","className","children","group","i","ref","el","fileName","_jsxFileName","lineNumber","columnNumber","memory","j","Fragment","_c","$RefreshReg$"],"sources":["/Users/lwi/Foodniverse3.0/frontend/src/pages/HomeFeed/HomeFeed.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useLayoutEffect } from \"react\";\nimport API from \"../../utils/api\";\nimport MemoryCard from \"../../components/MemoryCard/MemoryCard\";\n\nconst HomeFeed = () => {\n  const [memories, setMemories] = useState([]);\n  const groupRefs = useRef({});\n  const threadRefs = useRef({});\n\n  useLayoutEffect(() => {\n    Object.entries(groupRefs.current).forEach(([date, groupEl]) => {\n      const container = groupEl.querySelector(\".timeline-sequence\");\n      const thread = threadRefs.current[date];\n\n      if (container && thread) {\n        const dateStart = groupEl.getBoundingClientRect().left + 120;\n        const end = container.getBoundingClientRect().right;\n        const width = end - dateStart;\n\n        thread.style.width = `${width}px`;\n      }\n    });\n  }, [memories]);\n\n  useEffect(() => {\n    const fetchMemories = async () => {\n      try {\n        const res = await API.get(\"/memories\");\n        const formatted = res.data.memories.map((m) => {\n          const createdAt = new Date(m.createdAt._seconds * 1000);\n          return {\n            ...m,\n            dateFormatted: createdAt.toLocaleDateString(\"en-US\", {\n              month: \"short\",\n              day: \"numeric\",\n              year: \"numeric\",\n            }),\n            timeFormatted: createdAt.toLocaleTimeString(\"en-US\", {\n              hour: \"numeric\",\n              minute: \"2-digit\",\n              hour12: true,\n            }),\n          };\n        });\n        setMemories(formatted); // no reverse if backend is newest-first\n      } catch (err) {\n        console.error(\"❌ Failed to load memories:\", err);\n      }\n    };\n\n    fetchMemories();\n  }, []);\n\n  const groupedMemories = memories.reduce((acc, mem) => {\n    if (!acc[mem.dateFormatted]) acc[mem.dateFormatted] = [];\n    acc[mem.dateFormatted].push(mem);\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"flex flex-col gap-24 max-w-7xl mx-auto px-4 pt-10\">\n      {Object.entries(groupedMemories).map(([date, group], i) => (\n        <div\n          key={i}\n          className=\"relative w-full\"\n          ref={(el) => (groupRefs.current[date] = el)}\n        >\n          {/* One thread from date to last card */}\n          <div\n            className=\"absolute top-1/2 left-[7.5rem] h-[2px] bg-blue-300 opacity-70 z-0 rounded-full\"\n            ref={(el) => (threadRefs.current[date] = el)}\n          />\n\n          <div className=\"flex items-center relative w-full overflow-x-auto\">\n            {/* Date Tag */}\n            <div className=\"shrink-0 w-[7.5rem] flex justify-end pr-2 z-10\">\n              <div className=\"bg-blue-100 text-blue-700 text-xs font-medium px-3 py-1 rounded-full shadow-md\">\n                {date}\n              </div>\n            </div>\n\n            {/* Horizontal scroll container */}\n            <div className=\"overflow-x-auto\">\n              <div className=\"flex items-center gap-12 pl-2 z-10 min-w-max timeline-sequence\">\n                {group.map((memory, j) => (\n                  <React.Fragment key={j}>\n                    {/* Time Tag ABOVE the thread */}\n                    <div className=\"relative flex flex-col items-center w-fit\">\n                      <div className=\"mb-2 text-[11px] text-gray-500 font-medium whitespace-nowrap\">\n                        {memory.timeFormatted}\n                      </div>\n                    </div>\n\n                    {/* Card */}\n                    <MemoryCard memory={memory} />\n                  </React.Fragment>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default HomeFeed;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}